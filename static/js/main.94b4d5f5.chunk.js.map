{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","Searchbox.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","_ref","robots","cardArray","map","each","i","src_Card","key","Searchbox","searchfield","searchchange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","filterrobots","filter","toLowerCase","includes","src_Searchbox","src_CardList","Component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kGCASC,EAhBF,SAACC,GAAU,IAEbC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAElB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,mBACrBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAML,GACNG,EAAAC,EAAAC,cAAA,SAAKJ,MCMNS,EAdE,SAAAC,GAAc,IAAZC,EAAYD,EAAZC,OAETC,EAAYD,EAAOE,IAAI,SAACC,EAAMC,GACjC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKN,EAAOI,GAAGd,GAAIA,GAAIU,EAAOI,GAAGd,GAAIF,KAAMY,EAAOI,GAAGhB,KAAMC,MAAOW,EAAOI,GAAGf,UAGxF,OACIE,EAAAC,EAAAC,cAAA,WACKQ,ICMFM,EAfG,SAAAR,GAAgCA,EAA9BS,YAA8B,IAAlBC,EAAkBV,EAAlBU,aAE5B,OACIlB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACbH,EAAAC,EAAAC,cAAA,SACAC,UAAU,oCACVgB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCoCPI,cAtCX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAgBJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAACf,YAAac,EAAME,OAAOC,SAhBzCX,EAAKY,MAAQ,CACT1B,OAAQ,GACRQ,YAAa,IAJRM,mFAQM,IAAAa,EAAAV,KACfW,MAAM,8CACDC,KAAK,SAAAC,GACF,OAAOA,EAASC,SAEnBF,KAAK,SAAAG,GACFL,EAAKJ,SAAS,CAACvB,OAAOgC,uCAO1B,IAAAC,EAAAhB,KACEiB,EAAejB,KAAKS,MAAM1B,OAAOmC,OAAO,SAAAnC,GAC1C,OAAOA,EAAOZ,KAAKgD,cAAcC,SAASJ,EAAKP,MAAMlB,YAAY4B,iBAGrE,OACI7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAE6C,EAAF,CAAY7B,aAAcQ,KAAKI,iBAC/B9B,EAAAC,EAAAC,cAAC8C,EAAD,CAAUvC,OAASkC,YAhCjBM,mBCClBC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SL0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.94b4d5f5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = (props) => {\n\n    const {name,email,id} = props;\n\n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 \">\n            <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`}></img>\n            <div>\n                <h2>{ name}</h2>\n                <p>{ email }</p>\n            </div> \n        </div>\n    );\n\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n    const cardArray = robots.map((each, i) => {\n       return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\n        });\n\n        return (\n            <div>\n                {cardArray}\n            </div>\n        );\n\n}\n\nexport default CardList;","import React from 'react';\n\nconst Searchbox = ({searchfield,searchchange}) => {\n\n    return (\n        <div className = \"pa2\">\n            <input \n            className=\"pa3 ba b--green bg-lightest-blue \" \n            type=\"search\" \n            placeholder=\"Search Robots\" \n            onChange={searchchange}>\n            </input>\n        </div>\n    );\n\n}\n\nexport default Searchbox;","import React, {Component} from 'react';\nimport CardList from './CardList';\n//import { robots } from './robots';\nimport Searchbox from './Searchbox';\n\n\nclass App extends Component{\n    \n    constructor(){\n        super()\n        this.state = {\n            robots: [],\n            searchfield: \"\"\n        }\n    }\n    \n    componentDidMount(){\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(response => {\n                return response.json();\n            })\n            .then(users => {\n                this.setState({robots:users});\n            });\n    }\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value});\n    }\n\n    render(){\n        const filterrobots = this.state.robots.filter(robots=>{\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        });\n        \n        return ( \n            <div className=\"tc\">\n                <h1>Robo Friends</h1>\n                < Searchbox searchchange={this.onSearchChange}/>\n                <CardList robots={ filterrobots }/> \n            </div>\n        );\n    }\n\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}